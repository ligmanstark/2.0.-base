//numbers
let x = 10.5;
//let y = 124n; bigint-primitive
let z = NaN;

//string
//автоматическое определение типа, не требуется объязательное задание типа
let str = 'hello world';
//при изменении значений переменной либо, возможен следующий синтексис
let str2: string;
str2 = 'Hey boy!';
let symb = Symbol('jg');
//невозможно использовать математические операторы при использовании типа Symbol
//let t = str2 + //symb//

//boolean - logic
let o = true;
o = false;

//nothing
//требуется дополнительное задание типа переменной, т.к. при let ... = undefined / null - typeOf any
let a: undefined = undefined;
let g: null = null;

//literal - одно какое-то конкретное значение, которое имет тип = значению данной переменной и не может претерпривать каких-либо изменений
const nub = 108;
const str3 = 'str';

//universal - тип крайнего случая.
// 1.при установки типа переменной - any  TS не знает что именно будет в данной переменной, и не может контролировать допустимые методы к примитивам
let mm: any = 1;
mm = 'str';
mm = [];
//2. при установки типа переменной - unknown TS не знает, что будет в переменной на момент её назначения. В случае попытки использования какого-либо метода применимого
//к приметиву - выдаст ошибку пока не будет указано условие применения метода. прим. - if (typeof xx==="string") xx.toUpperCase()
let xx: unknown = 2;
if (typeof xx === 'string') xx.toLowerCase();
